TUTOR QUESTIONS 

# First 5 records
wiki_movies_raw[:5] 

# Last 5 records
wiki_movies_raw[-5:]

wiki_movies = [movie for movie in wiki_movies_raw
               if ('Director' in movie or 'Directed by' in movie)
                   and 'imdb_link' in movie]

movies_df.fillna(0)
movies_df.fillna(0).plot(x='budget_wiki',y='budget_kaggle', kind='scatter')
movies_df.fillna(0).plot(x='running_time', y='runtime', kind='scatter')

movies_df.fillna(0)[movies_df['box_office'] < 10**9].plot(x='box_office', y='revenue', kind='scatter')

#convert the lists in Language to tuples so the value_counts() method will work
movies_df['Language'].apply(lambda x: tuple(x) if type(x) == list else x).value_counts(dropna=False)

movies_df.drop(columns=['title_wiki','release_date_wiki','Language','Production company(s)'], inplace=True)

#make a function that fills in missing data for a column pair and then drops the redundant column.
def fill_missing_kaggle_data(df, kaggle_column, wiki_column):
    df[kaggle_column] = df.apply(
        lambda row: row[wiki_column] if row[kaggle_column] == 0 else row[kaggle_column]
        , axis=1)
    df.drop(columns=wiki_column, inplace=True)

 lists_to_tuples = lambda x: tuple(x) if type(x) == list else x

movies_df = movies_df.loc[:, ['imdb_id','id','title_kaggle','original_title','tagline','belongs_to_collection','url','imdb_link',
                       'runtime','budget_kaggle','revenue','release_date_kaggle','popularity','vote_average','vote_count',
                       'genres','original_language','overview','spoken_languages','Country',
                       'production_companies','production_countries','Distributor',
                       'Producer(s)','Director','Starring','Cinematography','Editor(s)','Writer(s)','Composer(s)','Based on'
                      ]]

wiki_columns_to_keep = [column for column in wiki_movies_df.columns if wiki_movies_df[column].isnull().sum() < len(wiki_movies_df) * 0.9]

#In case the data is not a string, we'll add the na=False argument to parse the non-string data to False. 
#Finally, we can call the sum()method to count up the total number that return True. 
box_office.str.contains(form_one, flags=re.IGNORECASE, na=False).sum()

 # 3. Write a list comprehension to filter out TV shows.
    wiki_movies = [movie for movie in wiki_movies_raw
                   if 'No. of episodes' not in movie]


# remove dollar sign and " million"
        s = re.sub('\$|\s|[a-zA-Z]','', s)
#sub??? remove???


 # convert to float and multiply by a million
        value = float(s) * 10**6
#million??

   # 16. Clean the running time column in the wiki_movies_df DataFrame.
    #make a variable that holds the non-null values of Release date in the DataFrame, converting lists to strings
    running_time = wiki_movies_df['Running time'].dropna().apply(lambda x: ' '.join(x) if type(x) == list else x)
    running_time[running_time.str.contains(r'^\d*\s*m', flags=re.IGNORECASE, na=False) != True]
    running_time_extract = running_time.str.extract(r'(\d+)\s*ho?u?r?s?\s*(\d*)|(\d+)\s*m')
    running_time_extract = running_time_extract.apply(lambda col: pd.to_numeric(col, errors='coerce')).fillna(0)
    wiki_movies_df['running_time'] = running_time_extract.apply(lambda row: row[0]*60 + row[1] if row[2] == 0 else row[2], 
                                                            axis=1)
    
kaggle_metadata[~kaggle_metadata['adult'].isin(['True','False'])]
~~~???

kaggle_metadata = kaggle_metadata[kaggle_metadata['adult'] == 'False'].drop('adult',axis='columns')
columns???

   def fill_missing_kaggle_data(df, kaggle_column, wiki_column):
        df[kaggle_column] = df.apply(
            lambda row: row[wiki_column] if row[kaggle_column] == 0 else row[kaggle_column]
            , axis=1)
        df.drop(columns=wiki_column, inplace=True)
column???/

 wiki_movies = [movie for movie in wiki_movies_raw
                   if (('Director' in movie or 'Directed by' in movie) 
                       & ('imdb_link' in movie) 
                       & ('No. of episodes' not in movie))]

lambda 
lambda x: type(x) != str)]
  running_time = wiki_movies_df['Running time'].dropna().apply(lambda x: ' '.join(x) if type(x) == list else x)
